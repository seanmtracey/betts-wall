<canvas></canvas>

<canvas id="mask"></canvas>

<script src="/javascripts/dat.min.js"></script>
<script src="/javascripts/fluid.js"></script>

<script>
(function(){
    'use strict';

    const canvas = document.querySelector("canvas");

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Number of simulated fingers
    const NUM_TOUCHES = 2;

    // Movement speed
    const MOVE_DISTANCE = 50;

    // Store positions for each touch
    let touches = [];

    // Initialize touch positions
    for (let i = 0; i < NUM_TOUCHES; i++) {
        touches.push({
            id: i,
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height
        });
    }

    // Function to create a Touch object
    function createTouch(id, x, y) {
        return new Touch({
            identifier: id,
            target: canvas,
            clientX: x,
            clientY: y,
            pageX: x,
            pageY: y,
            screenX: x,
            screenY: y
        });
    }

    // Function to dispatch touch events
    function dispatchTouchEvent(type, touchList) {
        const event = new TouchEvent(type, {
            touches: Array.from(touchList),
            targetTouches: Array.from(touchList),
            changedTouches: Array.from(touchList),
            bubbles: true,
            cancelable: true
        });
        canvas.dispatchEvent(event);
    }

    // Simulate touch events
    function simulateTouches() {
        let touchList = [];

        touches.forEach((touch, index) => {
            // Randomly move the touch point
            touch.x += (Math.random() - 0.5) * MOVE_DISTANCE;
            touch.y += (Math.random() - 0.5) * MOVE_DISTANCE;

            // Keep within canvas bounds
            touch.x = Math.max(0, Math.min(canvas.width, touch.x));
            touch.y = Math.max(0, Math.min(canvas.height, touch.y));

            // Create a new Touch object
            touchList.push(createTouch(touch.id, touch.x, touch.y));
        });

        console.log(touchList);

        const payload = {
            targetTouches : touchList
        };

        // Dispatch the events
        dispatchTouchEvent('touchstart', touchList);
        dispatchTouchEvent('touchmove', touchList);
        dispatchTouchEvent('touchend', touchList);

        {{!-- requestAnimationFrame(simulateTouches); --}}

        {{!-- setTimeout(simulateTouches, 100); --}}
    }

    // Start the simulation
    simulateTouches();

    setInterval(function(){
        multipleSplats(1);
    }, Math.random() * 1000);

    console.log("Simulating Touch Events");
}());

</script>

 <script>
    (function(){

        'use strict';

        const canvas = document.querySelector('canvas#mask');
        const ctx = canvas.getContext('2d');
        let points = [];
        let shapes = [];

        let mousePos = { x: 0, y: 0 };

        canvas.addEventListener('mousemove', (event) => {
            const rect = canvas.getBoundingClientRect();
            mousePos.x = event.clientX - rect.left;
            mousePos.y = event.clientY - rect.top;

            redraw(); // Redraw the canvas to update the cursor circle
        });

        function setAlpha(canvas) {
            const ctx = canvas.getContext('2d');
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;

            for (let i = 3; i < data.length; i += 4) {
                data[i] = 0; // Set alpha channel to 0 (fully transparent)
            }

            ctx.putImageData(imageData, 0, 0);
        }

        function goFullScreen() {
            const elem = document.documentElement;
            
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.mozRequestFullScreen) { // Firefox
                elem.mozRequestFullScreen();
            } else if (elem.webkitRequestFullscreen) { // Chrome, Safari and Opera
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) { // IE/Edge
                elem.msRequestFullscreen();
            }
        }

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            redraw();
        }

        function distance(p1, p2) {
            return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
        }

        function isSamePoint(p1, p2) {
            return distance(p1, p2) < 10;
        }

        function redraw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw all completed shapes
            shapes.forEach(shape => {
                if (shape.length > 0) {
                    ctx.beginPath();
                    ctx.moveTo(shape[0].x, shape[0].y);

                    shape.forEach(point => {
                        ctx.lineTo(point.x, point.y);
                    });

                    ctx.closePath();
                    ctx.fillStyle = 'black';
                    ctx.fill();
                }
            });

            // Draw current lines in white
            if (points.length > 0) {
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);

                for (let i = 1; i < points.length; i++) {
                    ctx.lineTo(points[i].x, points[i].y);
                }

                ctx.strokeStyle = 'red';
                ctx.lineWidth = 10;
                ctx.stroke();
            }

            // Draw the mouse-following circle
            ctx.beginPath();
            ctx.arc(mousePos.x, mousePos.y, 20, 0, Math.PI * 2);
            ctx.fillStyle = 'red';
            ctx.fill();
        }

        canvas.addEventListener('click', (event) => {
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;

            const point = { x, y };

            if (points.length > 2 && isSamePoint(points[0], point)) {
                points.push(points[0]); // Close the path
                shapes.push([...points]); // Store completed shape
                points = []; // Start a new shape on the next click
            } else {
                points.push(point);
            }

            localStorage.setItem("points", JSON.stringify(points))
            localStorage.setItem("shapes", JSON.stringify(shapes))

            redraw();
        });

        window.addEventListener('resize', resizeCanvas);

        window.addEventListener('keyup', function(e){

            e.stopImmediatePropagation();
            e.preventDefault();

            console.log(e.keyCode);

            if(e.keyCode === 27){
                console.log("Escape!");
                localStorage.clear();
                window.location.reload();
            } else if(e.keyCode === 70){
                goFullScreen();
            }

        }, false);

        resizeCanvas();

        points = JSON.parse(localStorage.getItem("points")) || [];
        shapes = JSON.parse(localStorage.getItem("shapes")) || [];

        setAlpha(canvas);

        redraw();

    }());
</script>